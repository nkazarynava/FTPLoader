{% extends 'BloggerBlogBundle::layout.html.twig' %}

{% block MyJavascript %}
    {% javascripts
            '@BloggerBlogBundle/Resources/public/js/plupload.full.min.js'
    %}
    <script src="{{ asset_url }}" type="text/javascript"></script>
    {% endjavascripts %}
{% endblock %}

{% block title %}Download{% endblock%}

{% block body %}
    <header>
        <h1>About loader</h1>
    </header>
    <body>

    <br />
    <pre id="console"></pre>

    <ul id="filelist"></ul>
    <br />

    <div id="container">
        <a id="browse" href="javascript:;">[Browse...]</a>
        <a id="start-upload" href="javascript:;">[Start Upload]</a>
    </div>

    <script type="text/javascript">
        var uploader = new plupload.Uploader({
            browse_button: 'browse', // this can be an id of a DOM element or the DOM element itself
            url: '{{ path('BloggerBlogBundle_savechunk') }}',
            chunk_size: '200kb',
            max_retries: 3,
            multipart_params : {
                "fullsize" : 0
            }
        });

        uploader.bind('FileUploaded', function(Up, File, Response) {

        });
        uploader.bind('ChunkUploaded', function(up, file, info){

        });

        var checkServerResponse = function(Response){
            var myData;
            try {
                myData = eval(Response.response);
            } catch(err) {
                myData = eval('(' + Response.response + ')');
            }
            if (myData.OK == 1) {
                return true;
            }
            return false;
        }



        uploader.bind('FilesAdded', function(up, files) {
            var html = '';
            plupload.each(files, function(file) {
                html += '<li id="' + file.id + '">' + file.name + ' (' + plupload.formatSize(file.size) + ') <b></b></li>';
                uploader.settings.multipart_params["fullsize"] = file.size;
                //increase peace size in case of big file
                var fileSize = file.size;
                var chunkSize = 0;

                if (fileSize < 10000000) {
                    chunkSize = 200000;
                } else if (fileSize < 500000000) {
                    chunkSize = 1500000;
                } else {
                    chunkSize = 2000000;
                }

                uploader.settings.chunk_size =  chunkSize;
                               
            });
            document.getElementById('filelist').innerHTML += html;
        });

        uploader.bind('UploadProgress', function(up, file) {
            document.getElementById(file.id).getElementsByTagName('b')[0].innerHTML = '<span>' + file.percent + "%</span>";
        });

        uploader.bind('Error', function(up, err) {
            document.getElementById('console').innerHTML += "\nError #" + err.code + ": " + err.message;
        });

        document.getElementById('start-upload').onclick = function() {
            uploader.start();
        };

        uploader.init();
    </script>

    </body>
{% endblock %}